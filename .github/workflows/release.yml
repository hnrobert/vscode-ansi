name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 1.2.3)"
        required: true
        type: string
      beta:
        description: "prerelease (beta)"
        required: true
        default: false
        type: boolean

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.release_notes.outputs.NOTES }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22"

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Use the workflow input `version` as the current tag (ensure v-prefix)
          if [[ "${{ github.event.inputs.version }}" == v* ]]; then
            CURRENT_TAG=${{ github.event.inputs.version }}
          else
            CURRENT_TAG=v${{ github.event.inputs.version }}
          fi
          LAST_TAG=$(git tag --sort=-creatordate | grep -v 'beta' | head -n 1)

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/${{ github.repository }}/commits/${CURRENT_TAG}"
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${CURRENT_TAG}"
          fi

          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Release ${CURRENT_TAG}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Changes in this release:" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "See full changelogs: [${LAST_TAG}...${CURRENT_TAG}](${COMPARE_LINK})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-and-release:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22"

      - name: Prepare pnpm and install dependencies
        run: |
          corepack enable
          corepack prepare pnpm@10.13.1 --activate
          pnpm install --frozen-lockfile --shamefully-hoist

      - name: Build the extension
        run: pnpm run build

      - name: Determine if prerelease
        id: prerelease
        run: |
          if [ "${{ github.event.inputs.beta }}" = "true" ] || [ "${{ github.event.inputs.beta }}" = "True" ]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract tag name
        id: extract_tag
        run: |
          if [[ "${{ github.event.inputs.version }}" == v* ]]; then
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Bump package version and create tag with pnpm
        if: steps.extract_tag.outputs.tag != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          # Normalize semver without leading v for pnpm
          if [[ "$INPUT_VERSION" == v* ]]; then
            SEMVER=${INPUT_VERSION#v}
          else
            SEMVER=${INPUT_VERSION}
          fi

          TAG=v${SEMVER}

          # Configure git author
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Skip if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists - skipping pnpm version"
          else
            pnpm version "$SEMVER"
            git push origin HEAD
            git push origin --tags
          fi

      - name: Prune devDependencies (keep production deps)
        run: |
          rm -rf node_modules
          pnpm install --prod --frozen-lockfile --shamefully-hoist
          echo "Production dependencies present:" && ls -1 node_modules | head -n 50 || true

      - name: Package the extension
        run: |
          if [[ ${{ steps.prerelease.outputs.prerelease }} == 'true' ]]; then
            pnpm dlx @vscode/vsce package --no-dependencies --pre-release -o ansi-viewer-${{ steps.extract_tag.outputs.tag }}.vsix
          else
            pnpm dlx @vscode/vsce package --no-dependencies -o ansi-viewer-${{ steps.extract_tag.outputs.tag }}.vsix
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag }}
          name: ${{ steps.extract_tag.outputs.tag }}
          files: ansi-viewer-${{ steps.extract_tag.outputs.tag }}.vsix
          draft: false
          prerelease: ${{ steps.prerelease.outputs.prerelease }}
          generate_release_notes: false
          body: ${{ needs.setup.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to VSCode Marketplace
        run: |
          if [[ ${{ steps.prerelease.outputs.prerelease }} == 'true' ]]; then
            pnpm dlx @vscode/vsce publish --no-dependencies --pre-release -p ${{ secrets.VSCE_PAT }}
          else
            pnpm dlx @vscode/vsce publish --no-dependencies -p ${{ secrets.VSCE_PAT }}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.VSCE_PAT }}
